/* sr-only class. You can use CSS to make elements with this class completely hidden from the visual page, but still be announced by screen readers. */

/* The span[class~="sr-only"] selector will select any span element whose class includes sr-only */

span[class~="sr-only"] {
  border: 0 !important;
  /* The CSS clip property is used to define the visible portions of an element.  */
  /*  you can use the !important keyword to ensure these properties are always applied, regardless of order or specificity. */
  clip: rect(1px, 1px, 1px, 1px) !important;
  /* The clip-path property determines the shape the clip property should take */
  clip-path: inset(50%) !important;
  width: 1px !important;
  height: 1px !important;
  /* To prevent the text content from overflowing */
  overflow: hidden !important;
  white-space: nowrap !important;
  /* , you need to take these hidden elements out of the document flow.
  This will ensure that not only are they no longer visible, but they are not even within the page view. */
  position: absolute !important;
  padding: 0 !important;
  margin: -1px !important;
}

html {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color: #0a0a23;
}

/* Time to style your table heading */
h1 {
  max-width: 37.25rem;
  margin: 0 auto;
  padding: 1.5rem 1.25rem;
}

/* Target your flex container with an h1 .flex selector. */
h1 .flex {
  display: flex;
  flex-direction: column-reverse;
  gap: 1rem;
}

/* The :first-of-type pseudo-selector is used to target the first element that matches the selector */
h1 .flex span:first-of-type {
  font-size: 0.7em;
}

/* The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the selector. */
h1 .flex span:last-of-type {
  font-size: 1.2em;
}

/* You wrapped your table in a section element - now you can style that to give your table a border */
section {
  max-width: 40rem;
  margin: 0 auto;
  border: 2px solid #d0d0d5;
  /* padding: 0.75rem 1.52rem 0.75rem 0.75rem; */
}

/* The last part of your table heading is your years. */
#years {
  display: flex;
  justify-content: flex-end;
  /* Adding position sticky moved the element into its own stack */
  position: sticky;
  top: 0;
  /* text color & background */
  color: #fff;
  background-color: #0a0a23;
  margin: 0 -2px;
  /* The calc() function is a CSS function that allows you to calculate a value based on other values. For example, you can use it to calculate the width of the viewport minus the margin of an element: */
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
  /* To ensure your #years element does not get hidden by different stacks, add a z-index property set to 999 in the #years rule. */
  z-index: 999;
}

/* Style the text within your #years element by creating a #years span[class] selector.  */
#years span[class] {
  font-weight: bold;
  width: 4.5rem;
  text-align: right;
}

/* You wrapped your tables in a container with the table-wrap class. */
.table-wrap {
  padding: 0px 3.75rem 1.25rem 0.15rem;
}

/* Before you start diving in to the table itself, your span elements are currently bolded. 
The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, any of your span elements that do not have the sr-only class. */
/* span {
  font-weight: normal;
} */

/* Set the border-collapse property to collapse, which will allow cell borders to collapse into a single border, instead of a border around each cell. Also set the border property to 0 to hide the borders themselves. */
table {
  border-collapse: collapse;
  border: 0;
  width: 100%;
  margin: 3rem;
  position: relative;
}

/* Next you need to style your caption elements to look more like headers */
table caption {
  color: #356eaf;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}

/* adding properties to the table data cell of table body */
tbody td {
  width: 100vw;
  min-width: 4rem;
  max-width: 4rem;
}

/* targeting table head with table body */
tbody th {
  width: calc(100% - 12rem);
}

/* The [attribute="value"] selector targets any element that has an attribute with a specific value. Create a tr[class="total"] selector to target specifically your tr elements with the total class */
tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

/* now targetting table head */
tr[class="total"] th {
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}

/* The key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total. The second will select tr elements where the class includes total.
 */
tr.total td {
  text-align: right;
  padding: 0 0.25rem;
}

/* The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type
 */
tr.total td:nth-of-type(3) {
  padding-right: 0.5rem;
}

/* Give your tr.total elements a hover effect that changes */
tr.total:hover {
  background-color: #99c9ff;
}

/* table row background-image */
tr.data {
  background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
  text-align: left;
  padding-top: 0.3rem;
  padding-left: 0.5rem;
}

tr.data th .description {
  display: block;
  font-style: italic;
  font-weight: normal;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}
tr.data td {
  vertical-align: top;
  text-align: right;
  padding: 0.3rem 0.25rem 0;
}

/*  element, but specifically select the last one.  */
tr.data td:last-of-type {
  padding-right: 0.5rem;
}
